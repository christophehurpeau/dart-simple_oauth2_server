{"dependencies":[{"kind":"library","name":"package:http/src/base_request.dart","id":"base_request","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"BaseRequest","id":"BaseRequest","comment":"The base class for HTTP requests.\n\nSubclasses of [BaseRequest] can be constructed manually and passed to\n[BaseClient.send], which allows the user to provide fine-grained control\nover the request properties. However, usually it's easier to use convenience\nmethods like [get] or [BaseClient.get].","children":[{"isSetter":true,"kind":"method","name":"contentLength=","id":"contentLength=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"34"},{"isSetter":true,"kind":"method","name":"persistentConnection=","id":"persistentConnection=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"44"},{"isSetter":true,"kind":"method","name":"followRedirects=","id":"followRedirects=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"54"},{"isSetter":true,"kind":"method","name":"maxRedirects=","id":"maxRedirects=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"65"},{"returnType":{"name":"ByteStream","refId":"byte_stream/ByteStream"},"kind":"method","name":"finalize","id":"finalize0()","comment":"Finalizes the HTTP request in preparation for it being sent. This freezes\nall mutable fields and returns a single-subscription [ByteStream] that\nemits the body of the request.\n\nThe base implementation of this returns null rather than a [ByteStream];\nsubclasses are responsible for creating the return value, which should be\nsingle-subscription to ensure that no data is dropped. They should also\nfreeze any additional mutable fields they add that don't make sense to\nchange after the request headers are sent.","line":"93"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"StreamedResponse","refId":"streamed_response/StreamedResponse"}]},"kind":"method","name":"send","id":"send0()","comment":"Sends this request.\n\nThis automatically initializes a new [Client] and closes that client once\nthe request is complete. If you're planning on making multiple requests to\nthe same server, you should use a single [Client] for all of those\nrequests.","line":"106"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_checkFinalized","id":"_checkFinalized0()","isPrivate":true,"line":"126"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"131"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"contentLength","id":"contentLength","comment":"The size of the request body, in bytes. This defaults to -1, which\nindicates that the size of the request is not known in advance.","line":"31"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"persistentConnection","id":"persistentConnection","comment":"Whether a persistent connection should be maintained with the server.\nDefaults to true.","line":"41"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"followRedirects","id":"followRedirects","comment":"Whether the client should follow redirects while resolving this request.\nDefaults to true.","line":"51"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"maxRedirects","id":"maxRedirects","comment":"The maximum number of redirects to follow when [followRedirects] is true.\nIf this number is exceeded the [BaseResponse] future will signal a\n[RedirectException]. Defaults to 5.","line":"62"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"finalized","id":"finalized","comment":"Whether the request has been finalized.","line":"77"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"method","id":"method","comment":"The HTTP method of the request. Most commonly \"GET\" or \"POST\", less\ncommonly \"HEAD\", \"PUT\", or \"DELETE\". Non-standard method names are also\nsupported.","line":"24"},{"ref":{"name":"Uri","refId":"dart.core/Uri"},"isFinal":true,"kind":"variable","name":"url","id":"url","comment":"The URL to which the request will be sent.","line":"27"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_contentLength","id":"_contentLength","isPrivate":true,"line":"32"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_persistentConnection","id":"_persistentConnection","isPrivate":true,"line":"42"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_followRedirects","id":"_followRedirects","isPrivate":true,"line":"52"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_maxRedirects","id":"_maxRedirects","isPrivate":true,"line":"63"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"headers","id":"headers","comment":"The headers for this request.","line":"74"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_finalized","id":"_finalized","isPrivate":true,"line":"78"},{"kind":"constructor","name":"","id":"2()","comment":"Creates a new HTTP request.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"method","refId":"base_request/BaseRequest/method"},"kind":"param","name":"method","id":"method"},{"ref":{"name":"Uri","refId":"dart.core/Uri"},"initializedField":{"name":"url","refId":"base_request/BaseRequest/url"},"kind":"param","name":"url","id":"url"}],"line":"81"}],"line":"20"}],"uri":"package:http/src/base_request.dart","line":"5"},{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"package:http/src/streamed_request.dart","id":"streamed_request","children":[{"superclass":{"name":"BaseRequest","refId":"base_request/BaseRequest"},"kind":"class","name":"StreamedRequest","id":"StreamedRequest","comment":"An HTTP request where the request body is sent asynchronously after the\nconnection has been established and the headers have been sent.\n\nWhen the request is sent via [BaseClient.send], only the headers and\nwhatever data has already been written to [StreamedRequest.stream] will be\nsent immediately. More data will be sent as soon as it's written to\n[StreamedRequest.sink], and when the sink is closed the request will end.","children":[{"returnType":{"name":"ByteStream","refId":"byte_stream/ByteStream"},"kind":"method","name":"finalize","id":"finalize0()","comment":"Freezes all mutable fields other than [stream] and returns a\nsingle-subscription [ByteStream] that emits the data being written to\n[sink].","line":"39"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"property","name":"sink","id":"sink","comment":"The sink to which to write data that will be sent as the request body.\nThis may be safely written to before the request is sent; the data will be\nbuffered.\n\nClosing this signals the end of the request.","line":"25"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"isFinal":true,"kind":"variable","name":"_controller","id":"_controller","comment":"The controller for [sink], from which [BaseRequest] will read data for\n[finalize].","isPrivate":true,"line":"29"},{"kind":"constructor","name":"","id":"2()","comment":"Creates a new streaming request.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"method","id":"method"},{"ref":{"name":"Uri","refId":"dart.core/Uri"},"kind":"param","name":"url","id":"url"}],"line":"32"}],"line":"19"}],"uri":"package:http/src/streamed_request.dart","line":"5"}