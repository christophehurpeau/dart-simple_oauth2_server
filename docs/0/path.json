{"kind":"library","name":"package:path/path.dart","id":"path","comment":"A comprehensive, cross-platform path manipulation library.\n\n## Installing ##\n\nUse [pub][] to install this package. Add the following to your\n`pubspec.yaml` file.\n\n    dependencies:\n      path: any\n\nThen run `pub install`.\n\nFor more information, see the [path package on pub.dartlang.org][pkg].\n\n[pub]: http://pub.dartlang.org\n[pkg]: http://pub.dartlang.org/packages/path\n\n## Usage ##\n\nThe path library was designed to be imported with a prefix, though you don't\nhave to if you don't want to:\n\n    import 'package:path/path.dart' as path;\n\nThe most common way to use the library is through the top-level functions.\nThese manipulate path strings based on your current working directory and\nthe path style (POSIX, Windows, or URLs) of the host platform. For example:\n\n    path.join(\"directory\", \"file.txt\");\n\nThis calls the top-level [join] function to join \"directory\" and \"file.txt\"\nusing the current platform's directory separator.\n\nIf you want to work with paths for a specific platform regardless of the\nunderlying platform that the program is running on, you can create a\n[Context] and give it an explicit [Style]:\n\n    var context = new path.Context(style: Style.windows);\n    context.join(\"directory\", \"file.txt\");\n\nThis will join \"directory\" and \"file.txt\" using the Windows path separator,\neven when the program is run on a POSIX machine.","children":[{"returnType":{"name":"Uri","refId":"dart.core/Uri"},"kind":"method","name":"toUri","id":"toUri1()","comment":"Returns the URI that represents [path].\n\nFor POSIX and Windows styles, this will return a `file:` URI. For the URL\nstyle, this will just convert [path] to a [Uri].\n\n    // POSIX\n    path.toUri('/path/to/foo')\n      // -> Uri.parse('file:///path/to/foo')\n\n    // Windows\n    path.toUri(r'C:\\path\\to\\foo')\n      // -> Uri.parse('file:///C:/path/to/foo')\n\n    // URL\n    path.toUri('http://dartlang.org/path/to/foo')\n      // -> Uri.parse('http://dartlang.org/path/to/foo')\n\nIf [path] is relative, a relative URI will be returned.\n\n    path.toUri('path/to/foo')\n      // -> Uri.parse('path/to/foo')","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"364"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"fromUri","id":"fromUri1()","comment":"Returns the path represented by [uri].\n\nFor POSIX and Windows styles, [uri] must be a `file:` URI. For the URL\nstyle, this will just convert [uri] to a string.\n\n    // POSIX\n    path.fromUri(Uri.parse('file:///path/to/foo'))\n      // -> '/path/to/foo'\n\n    // Windows\n    path.fromUri(Uri.parse('file:///C:/path/to/foo'))\n      // -> r'C:\\path\\to\\foo'\n\n    // URL\n    path.fromUri(Uri.parse('http://dartlang.org/path/to/foo'))\n      // -> 'http://dartlang.org/path/to/foo'","children":[{"ref":{"name":"Uri","refId":"dart.core/Uri"},"kind":"param","name":"uri","id":"uri"}],"line":"341"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"withoutExtension","id":"withoutExtension1()","comment":"Removes a trailing extension from the last part of [path].\n\n    withoutExtension('path/to/foo.dart'); // -> 'path/to/foo'","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"323"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isWithin","id":"isWithin2()","comment":"Returns `true` if [child] is a path beneath `parent`, and `false` otherwise.\n\n    path.isWithin('/root/path', '/root/path/a'); // -> true\n    path.isWithin('/root/path', '/root/other'); // -> false\n    path.isWithin('/root/path', '/root/path') // -> false","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"parent","id":"parent"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"child","id":"child"}],"line":"318"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"relative","id":"relative2()","comment":"Attempts to convert [path] to an equivalent relative path from the current\ndirectory.\n\n    // Given current directory is /root/path:\n    path.relative('/root/path/a/b.dart'); // -> 'a/b.dart'\n    path.relative('/root/other.dart'); // -> '../other.dart'\n\nIf the [from] argument is passed, [path] is made relative to that instead.\n\n    path.relative('/root/path/a/b.dart',\n        from: '/root/path'); // -> 'a/b.dart'\n    path.relative('/root/other.dart',\n        from: '/root/path'); // -> '../other.dart'\n\nIf [path] and/or [from] are relative paths, they are assumed to be relative\nto the current directory.\n\nSince there is no relative path from one drive letter to another on Windows,\nor from one hostname to another for URLs, this will return an absolute path\nin those cases.\n\n    // Windows\n    path.relative(r'D:\\other', from: r'C:\\home'); // -> 'D:\\other'\n\n    // URL\n    path.relative('http://dartlang.org', from: 'http://pub.dartlang.org');\n      // -> 'http://dartlang.org'","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"from","id":"from"}],"line":"310"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"normalize","id":"normalize1()","comment":"Normalizes [path], simplifying it by handling `..`, and `.`, and\nremoving redundant path separators whenever possible.\n\n    path.normalize('path/./to/..//file.text'); // -> 'path/file.txt'","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"281"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"split","id":"split1()","comment":"Splits [path] into its components using the current platform's [separator].\n\n    path.split('path/to/foo'); // -> ['path', 'to', 'foo']\n\nThe path will *not* be normalized before splitting.\n\n    path.split('path/../foo'); // -> ['path', '..', 'foo']\n\nIf [path] is absolute, the root directory will be the first element in the\narray. Example:\n\n    // Unix\n    path.split('/path/to/foo'); // -> ['/', 'path', 'to', 'foo']\n\n    // Windows\n    path.split(r'C:\\path\\to\\foo'); // -> [r'C:\\', 'path', 'to', 'foo']\n\n    // Browser\n    path.split('http://dartlang.org/path/to/foo');\n      // -> ['http://dartlang.org', 'path', 'to', 'foo']","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"275"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"joinAll","id":"joinAll1()","comment":"Joins the given path parts into a single path using the current platform's\n[separator]. Example:\n\n    path.joinAll(['path', 'to', 'foo']); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    path.joinAll(['path/', 'to', 'foo']); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    path.joinAll(['path', '/to', 'foo']); // -> '/to/foo'\n\nFor a fixed number of parts, [join] is usually terser.","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"parts","id":"parts"}],"line":"252"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join8()","comment":"Joins the given path parts into a single path using the current platform's\n[separator]. Example:\n\n    path.join('path', 'to', 'foo'); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    path.join('path/', 'to', 'foo'); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    path.join('path', '/to', 'foo'); // -> '/to/foo'","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"part1","id":"part1"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part2","id":"part2"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part3","id":"part3"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part4","id":"part4"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part5","id":"part5","line":"234"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part6","id":"part6","line":"234"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part7","id":"part7","line":"234"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part8","id":"part8","line":"234"}],"line":"233"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isRootRelative","id":"isRootRelative1()","comment":"Returns `true` if [path] is a root-relative path and `false` if it's not.\n\nURLs that start with `/` are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are still\nabsolute in every other sense, [isAbsolute] will return true for them. They\ncan be detected using [isRootRelative].\n\nNo POSIX and Windows paths are root-relative.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"218"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isRelative","id":"isRelative1()","comment":"Returns `true` if [path] is a relative path and `false` if it is absolute.\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"208"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isAbsolute","id":"isAbsolute1()","comment":"Returns `true` if [path] is an absolute path and `false` if it is a\nrelative path.\n\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`. For URLs, absolute paths either start with a protocol and\noptional hostname (e.g. `http://dartlang.org`, `file://`) or with a `/`.\n\nURLs that start with `/` are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are still\nabsolute in every other sense, [isAbsolute] will return true for them. They\ncan be detected using [isRootRelative].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"202"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"rootPrefix","id":"rootPrefix1()","comment":"Returns the root of [path], if it's absolute, or the empty string if it's\nrelative.\n\n    // Unix\n    path.rootPrefix('path/to/foo'); // -> ''\n    path.rootPrefix('/path/to/foo'); // -> '/'\n\n    // Windows\n    path.rootPrefix(r'path\\to\\foo'); // -> ''\n    path.rootPrefix(r'C:\\path\\to\\foo'); // -> r'C:\\'\n\n    // URL\n    path.rootPrefix('path/to/foo'); // -> ''\n    path.rootPrefix('http://dartlang.org/path/to/foo');\n      // -> 'http://dartlang.org'","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"188"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"extension","id":"extension1()","comment":"Gets the file extension of [path]: the portion of [basename] from the last\n`.` to the end (including the `.` itself).\n\n    path.extension('path/to/foo.dart');    // -> '.dart'\n    path.extension('path/to/foo');         // -> ''\n    path.extension('path.to/foo');         // -> ''\n    path.extension('path/to/foo.dart.js'); // -> '.js'\n\nIf the file name starts with a `.`, then that is not considered the\nextension:\n\n    path.extension('~/.bashrc');    // -> ''\n    path.extension('~/.notes.txt'); // -> '.txt'","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"170"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"dirname","id":"dirname1()","comment":"Gets the part of [path] before the last separator.\n\n    path.dirname('path/to/foo.dart'); // -> 'path/to'\n    path.dirname('path/to');          // -> 'path'\n\nTrailing separators are ignored.\n\n    path.dirname('path/to/'); // -> 'path'\n\nIf an absolute path contains no directories, only a root, then the root\nis returned.\n\n    path.dirname('/');  // -> '/' (posix)\n    path.dirname('c:\\');  // -> 'c:\\' (windows)\n\nIf a relative path has no directories, then '.' is returned.\n\n    path.dirname('foo');  // -> '.'\n    path.dirname('');  // -> '.'","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"155"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"basenameWithoutExtension","id":"basenameWithoutExtension1()","comment":"Gets the part of [path] after the last separator, and without any trailing\nfile extension.\n\n    path.basenameWithoutExtension('path/to/foo.dart'); // -> 'foo'\n\nTrailing separators are ignored.\n\n    path.basenameWithoutExtension('path/to/foo.dart/'); // -> 'foo'","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"133"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"basename","id":"basename1()","comment":"Gets the part of [path] after the last separator.\n\n    path.basename('path/to/foo.dart'); // -> 'foo.dart'\n    path.basename('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    path.basename('path/to/'); // -> 'to'","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"123"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"absolute","id":"absolute7()","comment":"Creates a new path by appending the given path parts to [current].\nEquivalent to [join()] with [current] as the first argument. Example:\n\n    path.absolute('path', 'to/foo'); // -> '/your/current/dir/path/to/foo'","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"part1","id":"part1"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part2","id":"part2"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part3","id":"part3"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part4","id":"part4"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part5","id":"part5","line":"112"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part6","id":"part6","line":"112"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"part7","id":"part7","line":"112"}],"line":"111"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"separator","id":"separator0()","comment":"Gets the path separator for the current platform. This is `\\` on Windows\nand `/` on other platforms (including the browser).","line":"105"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"current","id":"current0()","comment":"Gets the path to the current working directory.\n\nIn the browser, this means the current URL, without the last file segment.","line":"90"},{"returnType":{"name":"Style","refId":"path.style/Style"},"kind":"method","name":"style","id":"style0()","comment":"Returns the [Style] of the current context.\n\nThis is the style that all top-level path functions will use.","line":"85"},{"returnType":{"name":"Context","refId":"path.context/Context"},"kind":"method","name":"_context","id":"_context0()","comment":"An internal context for the current OS so we can provide a straight\nfunctional interface and not require users to create one.","isPrivate":true,"line":"74"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"separator","id":"separator","comment":"Gets the path separator for the current platform. This is `\\` on Windows\nand `/` on other platforms (including the browser).","line":"105"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"current","id":"current","comment":"Gets the path to the current working directory.\n\nIn the browser, this means the current URL, without the last file segment.","line":"90"},{"ref":{"name":"Style","refId":"path.style/Style"},"kind":"property","name":"style","id":"style","comment":"Returns the [Style] of the current context.\n\nThis is the style that all top-level path functions will use.","line":"85"},{"ref":{"name":"Context","refId":"path.context/Context"},"kind":"property","name":"_context","id":"_context","comment":"An internal context for the current OS so we can provide a straight\nfunctional interface and not require users to create one.","isPrivate":true,"line":"74"},{"ref":{"name":"Context","refId":"path.context/Context"},"kind":"variable","name":"_cachedContext","id":"_cachedContext","isPrivate":true,"line":"80"},{"ref":{"name":"Uri","refId":"dart.core/Uri"},"kind":"variable","name":"_lastBaseUri","id":"_lastBaseUri","comment":"The result of [Uri.base] last time the current working directory was\ncalculated.\n\nThis is used to invalidate [_cachedContext] when the working directory has\nchanged since the last time a function was called.","isPrivate":true,"line":"70"},{"isFinal":true,"kind":"variable","name":"url","id":"url","comment":"A default context for manipulating URLs.","line":"63"},{"isFinal":true,"kind":"variable","name":"windows","id":"windows","comment":"A default context for manipulating Windows paths.","line":"60"},{"isFinal":true,"kind":"variable","name":"posix","id":"posix","comment":"A default context for manipulating POSIX paths.","line":"57"}],"uri":"package:path/path.dart","line":"47"}