{"dependencies":[{"kind":"library","name":"dart:async","id":"dart.async","comment":"\nSupport for asynchronous programming,\nwith classes such as Future and Stream.\n\nFor an introduction to asynchronous programming in Dart, see the\n[dart:async section of the language tour]\n(https://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-asynchronous-programming).\n\n## Other resources\n\n* [Using Future Based APIs]\n(https://www.dartlang.org/articles/using-future-based-apis/): A first look at\nFutures and how to use them to write asynchronous Dart code.\n\n* [Futures and Error Handling]\n(https://www.dartlang.org/articles/futures-and-error-handling/): Everything\nyou wanted to know about handling errors and exceptions when working with\nFutures (but were afraid to ask).\n\n* [The Event Loop and Dart](https://www.dartlang.org/articles/event-loop/):\nLearn how Dart handles the event queue and microtask queue, so you can write\nbetter asynchronous code with fewer surprises.\n\n* [Asynchronous Unit Testing with Dart]\n(https://www.dartlang.org/articles/dart-unit-tests/#asynchronous-tests): How\nto test asynchronous code.\n","children":[{"superclass":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"kind":"class","name":"StreamView","id":"StreamView","comment":"[Stream] wrapper that only exposes the [Stream] interface. ","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"kind":"method","name":"asBroadcastStream","id":"asBroadcastStream2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onListen","id":"onListen","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"},"kind":"param","name":"subscription","id":"subscription","uri":"dart-sdk/lib/async/stream.dart","line":"1170"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onCancel","id":"onCancel","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"},"kind":"param","name":"subscription","id":"subscription","uri":"dart-sdk/lib/async/stream.dart","line":"1171"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"1171"}],"line":"1170"},{"returnType":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"kind":"method","name":"listen","id":"listen4()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"onData","id":"onData","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/StreamView/T"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/async/stream.dart","line":"1174"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onError","id":"onError","line":"1175"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onDone","id":"onDone","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"1176"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"cancelOnError","id":"cancelOnError","line":"1177"}],"line":"1174"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isBroadcast","id":"isBroadcast","line":"1168"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"kind":"variable","name":"_stream","id":"_stream","isPrivate":true,"line":"1164"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"initializedField":{"name":"_stream","refId":"dart.async/StreamView/_stream"},"kind":"param","name":"_stream","id":"_stream","isPrivate":true}],"line":"1166"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/async/stream.dart","line":"1163"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Stream","id":"Stream","comment":"\nA source of asynchronous data events.\n\nA Stream provides a sequence of events. Each event is either a data event or\nan error event, representing the result of a single computation. When the\nStream is exhausted, it may send a single \"done\" event.\n\nYou can [listen] on a stream to receive the events it sends. When you listen,\nyou receive a [StreamSubscription] object that can be used to stop listening,\nor to temporarily pause events from the stream.\n\nWhen an event is fired, the listeners at that time are informed.\nIf a listener is added while an event is being fired, the change\nwill only take effect after the event is completely fired. If a listener\nis canceled, it immediately stops receiving events.\n\nWhen the \"done\" event is fired, subscribers are unsubscribed before\nreceiving the event. After the event has been sent, the stream has no\nsubscribers. Adding new subscribers after this point is allowed, but\nthey will just receive a new \"done\" event as soon as possible.\n\nStreams always respect \"pause\" requests. If necessary they need to buffer\ntheir input, but often, and preferably, they can simply request their input\nto pause too.\n\nThere are two kinds of streams: The normal \"single-subscription\" streams and\n\"broadcast\" streams.\n\nA single-subscription stream allows only a single listener during the whole\nlifetime of the stream.\nIt holds back events until it gets a listener, and it may exhaust\nitself when the listener is unsubscribed, even if the stream wasn't done.\n\nSingle-subscription streams are generally used for streaming parts of\ncontiguous data like file I/O.\n\nA broadcast stream allows any number of listeners, and it fires\nits events when they are ready, whether there are listeners or not.\n\nBroadcast streams are used for independent events/observers.\n\nStream transformations, such as [where] and [skip], always return\nnon-broadcast streams. If several listeners want to listen to the returned\nstream, use [asBroadcastStream] to create a broadcast stream on top of the\nnon-broadcast stream.\n\nThe default implementation of [isBroadcast] returns false.\nA broadcast stream inheriting from [Stream] must override [isBroadcast]\nto return [:true:].\n","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"asBroadcastStream","id":"asBroadcastStream2()","comment":"\nReturns a multi-subscription stream that produces the same events as this.\n\nIf this stream is already a broadcast stream, it is returned unmodified.\n\nIf this stream is single-subscription, return a new stream that allows\nmultiple subscribers. It will subscribe to this stream when its first\nsubscriber is added, and will stay subscribed until this stream ends,\nor a callback cancels the subscription.\n\nIf [onListen] is provided, it is called with a subscription-like object\nthat represents the underlying subscription to this stream. It is\npossible to pause, resume or cancel the subscription during the call\nto [onListen]. It is not possible to change the event handlers, including\nusing [StreamSubscription.asFuture].\n\nIf [onCancel] is provided, it is called in a similar way to [onListen]\nwhen the returned stream stops having listener. If it later gets\na new listener, the [onListen] function is called again.\n\nUse the callbacks, for example, for pausing the underlying subscription\nwhile having no subscribers to prevent losing events, or canceling the\nsubscription when there are no listeners.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onListen","id":"onListen","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"subscription","id":"subscription","uri":"dart-sdk/lib/async/stream.dart","line":"228"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"228"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onCancel","id":"onCancel","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"subscription","id":"subscription","uri":"dart-sdk/lib/async/stream.dart","line":"229"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"229"}],"line":"227"},{"returnType":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"listen","id":"listen4()","comment":"\nAdds a subscription to this stream.\n\nOn each data event from this stream, the subscriber's [onData] handler\nis called. If [onData] is null, nothing happens.\n\nOn errors from this stream, the [onError] handler is given a\nobject describing the error.\n\nThe [onError] callback must be of type `void onError(error)` or\n`void onError(error, StackTrace stackTrace)`. If [onError] accepts\ntwo arguments it is called with the stack trace (which could be `null` if\nthe stream itself received an error without stack trace).\nOtherwise it is called with just the error object.\n\nIf this stream closes, the [onDone] handler is called.\n\nIf [cancelOnError] is true, the subscription is ended when\nthe first error is reported. The default is false.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"onData","id":"onData","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"event","id":"event","uri":"dart-sdk/lib/async/stream.dart","line":"254"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onError","id":"onError","line":"255"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onDone","id":"onDone","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"256"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"cancelOnError","id":"cancelOnError","line":"257"}],"line":"254"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"where","id":"where1()","comment":"\nCreates a new stream from this stream that discards some data events.\n\nThe new stream sends the same error and done events as this stream,\nbut it only sends the data events that satisfy the [test].\n\nThe returned stream is not a broadcast stream, even if this stream is.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"event","id":"event","uri":"dart-sdk/lib/async/stream.dart","line":"267"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"267"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"map","id":"map1()","comment":"\nCreates a new stream that converts each element of this stream\nto a new value using the [convert] function.\n\nThe returned stream is not a broadcast stream, even if this stream is.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"convert","id":"convert","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"event","id":"event","uri":"dart-sdk/lib/async/stream.dart","line":"277"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"277"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"handleError","id":"handleError2()","comment":"\nCreates a wrapper Stream that intercepts some errors from this stream.\n\nIf this stream sends an error that matches [test], then it is intercepted\nby the [handle] function.\n\nThe [onError] callback must be of type `void onError(error)` or\n`void onError(error, StackTrace stackTrace)`. Depending on the function\ntype the the stream either invokes [onError] with or without a stack\ntrace. The stack trace argument might be `null` if the stream itself\nreceived an error without stack trace.\n\nAn asynchronous error [:e:] is matched by a test function if [:test(e):]\nreturns true. If [test] is omitted, every error is considered matching.\n\nIf the error is intercepted, the [handle] function can decide what to do\nwith it. It can throw if it wants to raise a new (or the same) error,\nor simply return to make the stream forget the error.\n\nIf you need to transform an error into a data event, use the more generic\n[Stream.transform] to handle the event by writing a data event to\nthe output sink\n\nThe returned stream is not a broadcast stream, even if this stream is.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"onError","id":"onError"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"error","id":"error","uri":"dart-sdk/lib/async/stream.dart","line":"306"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"306"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"expand","id":"expand1()","comment":"\nCreates a new stream from this stream that converts each element\ninto zero or more events.\n\nEach incoming event is converted to an [Iterable] of new events,\nand each of these new events are then sent by the returned stream\nin order.\n\nThe returned stream is not a broadcast stream, even if this stream is.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"convert","id":"convert","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/async/stream.dart","line":"320"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"320"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"pipe","id":"pipe1()","comment":"\nBinds this stream as the input of the provided [StreamConsumer].\n","children":[{"ref":{"name":"StreamConsumer","refId":"dart.async/StreamConsumer","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"streamConsumer","id":"streamConsumer"}],"line":"327"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"transform","id":"transform1()","comment":"\nChains this stream as the input of the provided [StreamTransformer].\n\nReturns the result of [:streamTransformer.bind:] itself.\n","children":[{"ref":{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"streamTransformer","id":"streamTransformer"}],"line":"336"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a sequence of values by repeatedly applying [combine].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"T","refId":"dart.async/Stream/T"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"previous","id":"previous","uri":"dart-sdk/lib/async/stream.dart","line":"343"},{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"343"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"343"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"fold","id":"fold2()","comment":"Reduces a sequence of values by repeatedly applying [combine]. ","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previous","id":"previous","uri":"dart-sdk/lib/async/stream.dart","line":"373"},{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"373"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"373"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"join","id":"join1()","comment":"\nCollects string of data events' string representations.\n\nIf [separator] is provided, it is inserted between any two\nelements.\n\nAny error in the stream causes the future to complete with that\nerror. Otherwise it completes with the collected string when\nthe \"done\" event arrives.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"405"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"contains","id":"contains1()","comment":"\nChecks whether [needle] occurs in the elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"needle","id":"needle"}],"line":"438"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nExecutes [action] on each data event of the stream.\n\nCompletes the returned [Future] when all events of the stream\nhave been processed. Completes the future with an error if the\nstream has an error event, or if [action] throws.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"468"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"468"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"every","id":"every1()","comment":"\nChecks whether [test] accepts all elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"493"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"493"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"any","id":"any1()","comment":"\nChecks whether [test] accepts any element provided by this stream.\n\nCompletes the [Future] when the answer is known.\n\nIf this stream reports an error, the [Future] reports that error.\n\nStops listening to the stream after the first matching element has been\nfound.\n\nInternally the method cancels its subscription after this element. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"530"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"530"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]}]},"kind":"method","name":"toList","id":"toList0()","comment":"Collects the data of this stream in a [List]. ","line":"593"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"Collects the data of this stream in a [Set]. ","line":"609"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"drain","id":"drain1()","comment":"\nDiscards all data on the stream, but signals when it's done or an error\noccured.\n\nWhen subscribing using [drain], cancelOnError will be true. This means\nthat the future will complete with the first error on the stream and then\ncancel the subscription.\n\nIn case of a `done` event the future completes with the given\n[futureValue].\n","children":[{"isOptional":true,"kind":"param","name":"futureValue","id":"futureValue"}],"line":"635"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"take","id":"take1()","comment":"\nProvides at most the first [n] values of this stream.\n\nForwards the first [n] data events of this stream, and all error\nevents, to the returned stream, and ends with a done event.\n\nIf this stream produces fewer than [count] values before it's done,\nso will the returned stream.\n\nStops listening to the stream after the first [n] elements have been\nreceived.\n\nInternally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.\n\nThe returned stream is not a broadcast stream, even if this stream is.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"656"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nForwards data events while [test] is successful.\n\nThe returned stream provides the same events as this stream as long\nas [test] returns [:true:] for the event data. The stream is done\nwhen either this stream is done, or when this stream first provides\na value that [test] doesn't accept.\n\nStops listening to the stream after the accepted elements.\n\nInternally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.\n\nThe returned stream is not a broadcast stream, even if this stream is.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"676"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"676"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nSkips the first [count] data events from this stream.\n\nThe returned stream is not a broadcast stream, even if this stream is.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"685"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nSkip data events from this stream while they are matched by [test].\n\nError and done events are provided by the returned stream unmodified.\n\nStarting with the first data event where [test] returns false for the\nevent data, the returned stream will have the same events as this stream.\n\nThe returned stream is not a broadcast stream, even if this stream is.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"699"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"699"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"distinct","id":"distinct1()","comment":"\nSkips data events if they are equal to the previous data event.\n\nThe returned stream provides the same events as this stream, except\nthat it never provides two consequtive data events that are equal.\n\nEquality is determined by the provided [equals] method. If that is\nomitted, the '==' operator on the last provided data element is used.\n\nThe returned stream is not a broadcast stream, even if this stream is.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"equals","id":"equals","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"previous","id":"previous","uri":"dart-sdk/lib/async/stream.dart","line":"714"},{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"next","id":"next","uri":"dart-sdk/lib/async/stream.dart","line":"714"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"714"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[]},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nFinds the first element of this stream matching [test].\n\nReturns a future that is filled with the first element of this stream\nthat [test] returns true for.\n\nIf no such element is found before this stream is done, and a\n[defaultValue] function is provided, the result of calling [defaultValue]\nbecomes the value of the future.\n\nStops listening to the stream after the first matching element has been\nreceived.\n\nInternally the method cancels its subscription after the first element that\nmatches the predicate. This means that single-subscription (non-broadcast)\nstreams are closed and cannot be reused after a call to this method.\n\nIf an error occurs, or if this stream ends without finding a match and\nwith no [defaultValue] function provided, the future will receive an\nerror.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"839"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"defaultValue","id":"defaultValue","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"839"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[]},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nFinds the last element in this stream matching [test].\n\nAs [firstWhere], except that the last matching element is found.\nThat means that the result cannot be provided before this stream\nis done.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"873"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"defaultValue","id":"defaultValue","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"873"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nFinds the single element in this stream matching [test].\n\nLike [lastMatch], except that it is an error if more than one\nmatching element occurs in the stream.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"913"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"913"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the value of the [index]th data event of this stream.\n\nStops listening to the stream after the [index]th data event has been\nreceived.\n\nInternally the method cancels its subscription after these elements. This\nmeans that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this method.\n\nIf an error event occurs before the value is found, the future completes\nwith this error.\n\nIf a done event occurs before the value is found, the future completes\nwith a [RangeError].\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"967"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"timeout","id":"timeout2()","comment":"\nCreates a new stream with the same events as this stream.\n\nWhenever more than [timeLimit] passes between two events from this stream,\nthe [onTimeout] function is called.\n\nThe countdown doesn't start until the returned stream is listened to.\nThe countdown is reset every time an event is forwarded from this stream,\nor when the stream is paused and resumed.\n\nThe [onTimeout] function is called with one argument: an\n[EventSink] that allows putting events into the returned stream.\nThis `EventSink` is only valid during the call to `onTimeout`.\n\nIf `onTimeout` is omitted, a timeout will just put a [TimeoutException]\ninto the error channel of the returned stream.\n\nThe returned stream is not a broadcast stream, even if this stream is.\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"timeLimit","id":"timeLimit"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onTimeout","id":"onTimeout","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"EventSink","refId":"dart.async/EventSink"},"kind":"param","name":"sink","id":"sink","uri":"dart-sdk/lib/async/stream.dart","line":"1006"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"1006"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isBroadcast","id":"isBroadcast","comment":"\nReports whether this stream is a broadcast stream.\n","line":"201"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"property","name":"length","id":"length","comment":"Counts the elements in the stream. ","line":"555"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReports whether this stream contains any elements.\n\nStops listening to the stream after the first element has been received.\n\nInternally the method cancels its subscription after the first element.\nThis means that single-subscription (non-broadcast) streams are closed and\ncannot be reused after a call to this getter.\n","line":"577"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element of the stream.\n\nStops listening to the stream after the first element has been received.\n\nInternally the method cancels its subscription after the first element.\nThis means that single-subscription (non-broadcast) streams are closed\nand cannot be reused after a call to this getter.\n\nIf an error event occurs before the first data event, the resulting future\nis completed with that error.\n\nIf this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a [StateError].\n\nExcept for the type of the error, this method is equivalent to\n[:this.elementAt(0):].\n","line":"736"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element of the stream.\n\nIf an error event occurs before the first data event, the resulting future\nis completed with that error.\n\nIf this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a [StateError].\n","line":"760"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element.\n\nIf an error event occurs before or after the first data event, the\nresulting future is completed with that error.\n\nIf [this] is empty or has more than one element throws a [StateError].\n","line":"790"},{"kind":"constructor","name":"","id":"0()","line":"62"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"constructor","name":"fromFuture","id":"fromFuture1()","comment":"\nCreates a new single-subscription stream from the future.\n\nWhen the future completes, the stream will fire one event, either\ndata or error, and then close with a done-event.\n","children":[{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"future","id":"future"}],"line":"70"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"constructor","name":"fromIterable","id":"fromIterable1()","comment":"\nCreates a single-subscription stream that gets its data from [data].\n\nIf iterating [data] throws an error, the stream ends immediately with\nthat error. No done event will be sent (iteration is not complete), but no\nfurther data events will be generated either, since iteration cannot\ncontinue.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"data","id":"data"}],"line":"91"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"constructor","name":"periodic","id":"periodic2()","comment":"\nCreates a stream that repeatedly emits events at [period] intervals.\n\nThe event values are computed by invoking [computation]. The argument to\nthis callback is an integer that starts with 0 and is incremented for\nevery event.\n\nIf [computation] is omitted the event values will all be `null`.\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"period","id":"period"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"computation","id":"computation","children":[{"returnType":{"name":"T","refId":"dart.async/Stream/T"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"computationCount","id":"computationCount","uri":"dart-sdk/lib/async/stream.dart","line":"106"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"106"}],"line":"105"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"constructor","name":"eventTransformed","id":"eventTransformed2()","comment":"\nCreates a stream where all events of an existing stream are piped through\na sink-transformation.\n\nThe given [mapSink] closure is invoked when the returned stream is\nlistened to. All events from the [source] are added into the event sink\nthat is returned from the invocation. The transformation puts all\ntransformed events into the sink the [mapSink] closure received during\nits invocation. Conceptually the [mapSink] creates a transformation pipe\nwith the input sink being the returned [EventSink] and the output sink\nbeing the sink it received.\n\nThis constructor is frequently used to build transformers.\n\nExample use for a duplicating transformer:\n\n    class DuplicationSink implements EventSink<String> {\n      final EventSink<String> _outputSink;\n      DuplicationSink(this._outputSink);\n\n      void add(String data) {\n        _outputSink.add(data);\n        _outputSink.add(data);\n      }\n\n      void addError(e, [st]) => _outputSink(e, st);\n      void close() => _outputSink.close();\n    }\n\n    class DuplicationTransformer implements StreamTransformer<String, String> {\n      // Some generic types ommitted for brevety.\n      Stream bind(Stream stream) => new Stream<String>.eventTransform(\n          stream,\n          (EventSink sink) => new DuplicationSink(sink));\n    }\n\n    stringStream.transform(new DuplicationTransformer());\n","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"mapSink","id":"mapSink","children":[{"returnType":{"name":"EventSink","refId":"dart.async/EventSink"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"sink","id":"sink","uri":"dart-sdk/lib/async/stream.dart","line":"194"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"194"}],"line":"193"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/async/stream.dart","line":"61"}],"uri":"dart-sdk/lib/async/async.dart","line":"32"},{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"package:http/src/byte_stream.dart","id":"byte_stream","children":[{"superclass":{"name":"StreamView","refId":"dart.async/StreamView","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"class","name":"ByteStream","id":"ByteStream","comment":"A stream of chunks of bytes representing a single piece of data.","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Uint8List","refId":"dart.typed_data/Uint8List"}]},"kind":"method","name":"toBytes","id":"toBytes0()","comment":"Collects the data of this stream in a [Uint8List].","line":"25"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"bytesToString","id":"bytesToString1()","comment":"Collect the data of this stream in a [String], decoded according to\n[encoding], which defaults to `UTF8`.","children":[{"ref":{"name":"Encoding","refId":"dart.convert/Encoding"},"defaultValue":"UTF8","isOptional":true,"kind":"param","name":"encoding","id":"encoding"}],"line":"32"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"toStringStream","id":"toStringStream1()","children":[{"ref":{"name":"Encoding","refId":"dart.convert/Encoding"},"defaultValue":"UTF8","isOptional":true,"kind":"param","name":"encoding","id":"encoding"}],"line":"35"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"param","name":"stream","id":"stream"}],"line":"16"},{"returnType":{"name":"ByteStream","refId":"byte_stream/ByteStream"},"kind":"constructor","name":"fromBytes","id":"fromBytes1()","comment":"Returns a single-subscription byte stream that will emit the given bytes\nin a single chunk.","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"}],"line":"21"}],"line":"15"}],"uri":"package:http/src/byte_stream.dart","line":"5"}