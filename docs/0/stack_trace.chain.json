{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"StackTrace","id":"StackTrace","comment":"\nAn interface implemented by all stack trace objects.\n\nA [StackTrace] is intended to convey information to the user about the call\nsequence that triggered an exception.\n\nThese objects are created by the runtime, it is not possible to create\nthem programmatically.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a [String] representation of the stack trace.\n\nThe string represents the full stack trace starting from\nthe point where a throw ocurred to the top of the current call sequence.\n\nThe exact format of the string representation is not final.\n","line":"25"}],"uri":"dart-sdk/lib/core/stacktrace.dart","line":"16"},{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"package:stack_trace/src/chain.dart","id":"stack_trace.chain","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"StackTrace","refId":"dart.core/StackTrace"}],"kind":"class","name":"Chain","id":"Chain","comment":"A chain of stack traces.\n\nA stack chain is a collection of one or more stack traces that collectively\nrepresent the path from [main] through nested function calls to a particular\ncode location, usually where an error was thrown. Multiple stack traces are\nnecessary when using asynchronous functions, since the program's stack is\nreset before each asynchronous callback is run.\n\nStack chains can be automatically tracked using [Chain.capture]. This sets\nup a new [Zone] in which the current stack chain is tracked and can be\naccessed using [new Chain.current]. Any errors that would be top-leveled in\nthe zone can be handled, along with their associated chains, with the\n`onError` callback.\n\nFor the most part [Chain.capture] will notice when an error is thrown and\nassociate the correct stack chain with it; the chain can be accessed using\n[new Chain.forTrace]. However, there are some cases where exceptions won't\nbe automatically detected: any [Future] constructor,\n[Completer.completeError], [Stream.addError], and libraries that use these.\nFor these, all you need to do is wrap the Future or Stream in a call to\n[Chain.track] and the errors will be tracked correctly.","children":[{"isStatic":true,"kind":"method","name":"capture","id":"capture2()","comment":"Runs [callback] in a [Zone] in which the current stack chain is tracked\nand automatically associated with (most) errors.\n\nIf [onError] is passed, any error in the zone that would otherwise go\nunhandled is passed to it, along with the [Chain] associated with that\nerror. Note that if [callback] produces multiple unhandled errors,\n[onError] may be called more than once. If [onError] isn't passed, the\nparent Zone's `unhandledErrorHandler` will be called with the error and\nits chain.\n\nFor the most part an error thrown in the zone will have the correct stack\nchain associated with it. However, there are some cases where exceptions\nwon't be automatically detected: any [Future] constructor,\n[Completer.completeError], [Stream.addError], and libraries that use\nthese. For these, all you need to do is wrap the Future or Stream in a\ncall to [Chain.track] and the errors will be tracked correctly.\n\nNote that even if [onError] isn't passed, this zone will still be an error\nzone. This means that any errors that would cross the zone boundary are\nconsidered unhandled.\n\nIf [callback] returns a value, it will be returned by [capture] as well.\n\nCurrently, capturing stack chains doesn't work when using dart2js due to\nissues [15171] and [15105]. Stack chains reported on dart2js will contain\nonly one trace.\n\n[15171]: https://code.google.com/p/dart/issues/detail?id=15171\n[15105]: https://code.google.com/p/dart/issues/detail?id=15105","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback","children":[{"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"ChainHandler","refId":"stack_trace.chain/ChainHandler"},"isOptional":true,"isNamed":true,"kind":"param","name":"onError","id":"onError"}],"line":"83"},{"isStatic":true,"kind":"method","name":"track","id":"track1()","comment":"Ensures that any errors emitted by [futureOrStream] have the correct stack\nchain information associated with them.\n\nFor the most part an error thrown within a [capture] zone will have the\ncorrect stack chain automatically associated with it. However, there are\nsome cases where exceptions won't be automatically detected: any [Future]\nconstructor, [Completer.completeError], [Stream.addError], and libraries\nthat use these.\n\nThis returns a [Future] or [Stream] that will emit the same values and\nerrors as [futureOrStream]. The only exception is that if [futureOrStream]\nemits an error without a stack trace, one will be added in the return\nvalue.\n\nIf this is called outside of a [capture] zone, it just returns\n[futureOrStream] as-is.\n\nAs the name suggests, [futureOrStream] may be either a [Future] or a\n[Stream].","children":[{"kind":"param","name":"futureOrStream","id":"futureOrStream"}],"line":"109"},{"returnType":{"name":"Trace","refId":"trace/Trace"},"kind":"method","name":"toTrace","id":"toTrace0()","comment":"Converts [this] to a [Trace].\n\nThe trace version of a chain is just the concatenation of all the traces\nin the chain.","line":"170"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"172"},{"ref":{"name":"StackZoneSpecification","refId":"stack_trace.stack_zone_specification/StackZoneSpecification"},"isStatic":true,"kind":"property","name":"_currentSpec","id":"_currentSpec","comment":"The [StackZoneSpecification] for the current zone.","isPrivate":true,"line":"51"},{"ref":{"name":"Chain","refId":"stack_trace.chain/Chain"},"kind":"property","name":"terse","id":"terse","comment":"Returns a terser version of [this].\n\nThis calls [Trace.terse] on every trace in [traces], and discards any\ntrace that contain only internal frames.","line":"159"},{"isStatic":true,"kind":"variable","name":"_GAP","id":"_GAP","comment":"The line used in the string representation of stack chains to represent\nthe gap between traces.","isPrivate":true,"line":"41"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Trace","refId":"trace/Trace"}]},"isFinal":true,"kind":"variable","name":"traces","id":"traces","comment":"The stack traces that make up this chain.\n\nLike the frames in a stack trace, the traces are ordered from most local\nto least local. The first one is the trace where the actual exception was\nraised, the second one is where that callback was scheduled, and so on.","line":"48"},{"returnType":{"name":"Chain","refId":"stack_trace.chain/Chain"},"kind":"constructor","name":"current","id":"current1()","comment":"Returns the current stack chain.\n\nBy default, the first frame of the first trace will be the line where\n[Chain.current] is called. If [level] is passed, the first trace will\nstart that many frames up instead.\n\nIf this is called outside of a [capture] zone, it just returns a\nsingle-trace chain.","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"level","id":"level"}],"line":"126"},{"returnType":{"name":"Chain","refId":"stack_trace.chain/Chain"},"kind":"constructor","name":"forTrace","id":"forTrace1()","comment":"Returns the stack chain associated with [trace].\n\nThe first stack trace in the returned chain will always be [trace]\n(converted to a [Trace] if necessary). If there is no chain associated\nwith [trace] or if this is called outside of a [capture] zone, this just\nreturns a single-trace chain containing [trace].\n\nIf [trace] is already a [Chain], it will be returned as-is.","children":[{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"param","name":"trace","id":"trace"}],"line":"139"},{"returnType":{"name":"Chain","refId":"stack_trace.chain/Chain"},"kind":"constructor","name":"parse","id":"parse1()","comment":"Parses a string representation of a stack chain.\n\nSpecifically, this parses the output of [Chain.toString].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"chain","id":"chain"}],"line":"148"},{"kind":"constructor","name":"","id":"1()","comment":"Returns a new [Chain] comprised of [traces].","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Trace","refId":"trace/Trace"}]},"kind":"param","name":"traces","id":"traces"}],"line":"152"}],"line":"38"},{"returnType":{"name":"void","refId":"void"},"kind":"typedef","name":"ChainHandler","id":"ChainHandler","comment":"A function that handles errors in the zone wrapped by [Chain.capture].","children":[{"kind":"param","name":"error","id":"error"},{"ref":{"name":"Chain","refId":"stack_trace.chain/Chain"},"kind":"param","name":"chain","id":"chain"}],"line":"15"}],"uri":"package:stack_trace/src/chain.dart","line":"5"}